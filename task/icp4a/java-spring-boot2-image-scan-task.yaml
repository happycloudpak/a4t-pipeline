apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  annotations:
    manifestival: new
  creationTimestamp: "2020-04-01T13:41:46Z"
  generation: 1
  name: java-spring-boot2-image-scan-task
  namespace: kabanero
  ownerReferences:
  - apiVersion: kabanero.io/v1alpha2
    controller: false
    kind: Stack
    name: java-spring-boot2
    uid: 4ee1ace2-2196-4c47-8fe7-b004cbdd20d5
  resourceVersion: "100107"
  selfLink: /apis/tekton.dev/v1alpha1/namespaces/kabanero/tasks/java-spring-boot2-image-scan-task
  uid: c34ef024-628a-4526-b61a-f6fca33bf43b
spec:
  inputs:
    params:
    - default: oscap-chroot
      description: The scanner command
      name: command
      type: string
    - default: oval
      description: Specifies the type of SCAP content to use. For example, oval or
        xccdf.
      name: module
      type: string
    - default: ""
      description: Specifies the module operation options and arguments
      name: options-and-arguments
      type: string
    - default: kabanero/scans
      description: The relative directory to save the scan outputs to
      name: scansDir
      type: string
    - default: /usr/local/share/openscap/cpe/openscap-cpe-oval.xml
      description: The scanner's XCCDF or OVAL file
      name: pathToInputFile
      type: string
    resources:
    - name: git-source
      type: git
    - name: docker-image
      type: image
  steps:
  - args:
    - -c
    - "#logic to make docker image image_name as lowercase\n#example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF\n#
      Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF\n\necho
      \"INPUTS_RESOURCE_DOCKER_IMAGE_URL=\\$( echo \\$(inputs.resources.docker-image.url)
      ) \" > imageurl_imagename_lowercase.sh\n\n# we cut the string with last occurance
      of '/' to get image name and tag as secondHalf of URL\necho \"firstHalfURL=\\$(echo
      \\$INPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\\\"/\\\" -f2- | rev)\"  >>
      imageurl_imagename_lowercase.sh\necho \"secondHalfURL=\\$(echo \\$INPUTS_RESOURCE_DOCKER_IMAGE_URL
      | rev | cut -d\\\"/\\\" -f1 | rev)\" >>  imageurl_imagename_lowercase.sh\n\n#Conditional
      check if ':' is present in 'secondHalfURL'. \n#for ex - secondHalfURL=appsodympversion:abcDEF\necho
      \"if [[ \\$secondHalfURL == *\\\":\\\"* ]]; then\" >> imageurl_imagename_lowercase.sh\necho
      \"  imagename=\\$(cut -d ':' -f 1 <<< \\\"\\$secondHalfURL\\\" )\" >> imageurl_imagename_lowercase.sh\necho
      \"  imagename_lowercase=\\$(echo \\$imagename |  tr '[:upper:]' '[:lower:]')\"
      >> imageurl_imagename_lowercase.sh\necho \"  tagname=\\$(cut -d ':' -f 2- <<<
      \\\"\\$secondHalfURL\\\" )\" >> imageurl_imagename_lowercase.sh\necho \"  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\\$firstHalfURL/\\$imagename_lowercase:\\$tagname\"
      >> imageurl_imagename_lowercase.sh\n#conditional check for ex - secondHalfURL=appsodympversion:abcDEF\necho
      \"else\" >> imageurl_imagename_lowercase.sh\necho \"  imagename=\\$secondHalfURL\"
      >> imageurl_imagename_lowercase.sh\necho \"  imagename_lowercase=\\$(echo \\$imagename
      |  tr '[:upper:]' '[:lower:]')\" >> imageurl_imagename_lowercase.sh\necho \"
      \ OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\\$firstHalfURL/\\$imagename_lowercase\"
      >> imageurl_imagename_lowercase.sh\necho \"fi\" >> imageurl_imagename_lowercase.sh
      \necho \"echo \\\"\\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\\\" \" >>  imageurl_imagename_lowercase.sh\n\nchmod
      755 imageurl_imagename_lowercase.sh\n"
    command:
    - /bin/bash
    env:
    - name: gitsource
      value: git-source
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    name: imagename-lowercase
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - args:
    - -c
    - |
      INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
      echo "INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

      echo "Pulling image docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
      buildah from --tls-verify=false docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE
      echo $(buildah mount $(buildah containers -q)) > /var/lib/containers/rootfs.txt
      mountDir=$(cat /var/lib/containers/rootfs.txt)
      echo ""
      echo "Mounted image to $mountDir with contents:"
      ls -la $mountDir
      cp -a $mountDir /var/lib/containers
      echo ""
      imageDir=/var/lib/containers/merged
      imageIdFileName=/var/lib/containers/imageid.txt
      echo "Copied mounted image to $imageDir:"
      ls -la $imageDir
      echo $(buildah images -q) > $imageIdFileName
      echo ""
      echo "Image ID of the image to scan: $(cat $imageIdFileName)"
    command:
    - /bin/bash
    env:
    - name: gitsource
      value: git-source
    image: appsody/appsody-buildah:0.5.0-buildah1.9.0
    name: mount-image
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - args:
    - -c
    - |
      imageid=$(cat /var/lib/containers/imageid.txt)
      imageDir=/var/lib/containers/merged

      INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
      echo "INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

      outputDir=/workspace/scans/$(inputs.params.scansDir)/$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE/$imageid
      mkdir -p $outputDir
      optionsAndArgs="$(inputs.params.options-and-arguments) --results $outputDir/results.xml --report $outputDir/report.html $(inputs.params.pathToInputFile)"
      scanCommand="$(inputs.params.command) $imageDir $(inputs.params.module) eval $optionsAndArgs"

      echo "Scanning copy of image docker://$INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE with image ID $imageid in $imageDir with contents:"
      cd $imageDir
      ls -la
      echo ""
      echo "Scanning image with command:"
      echo $scanCommand
      $scanCommand
      echo ""
      echo "Scanning of copy of image $INPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE with image ID $imageid in $imageDir complete"
      echo ""

      #Display contents of the results.xml and report.html files
      echo "Displaying contents of $outputDir/results.xml"
      echo "********** START OF results.xml **********"
      cat $outputDir/results.xml
      echo "********** END OF results.xml ************"
      echo ""
      echo "Displaying contents of $outputDir/report.html"
      echo "********** START OF report.html **********"
      cat $outputDir/report.html
      echo "********** END OF report.html ************"
    command:
    - /bin/bash
    image: kabanero/scanner:1.3.1
    name: scan-image
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /workspace/scans
      name: host-save-dir
    - mountPath: /var/lib/containers
      name: varlibcontainers
  volumes:
  - hostPath:
      path: /var/lib
    name: host-save-dir
  - emptyDir: {}
    name: varlibcontainers
