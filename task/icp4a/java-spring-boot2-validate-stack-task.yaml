apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  annotations:
    manifestival: new
  creationTimestamp: "2020-04-01T13:41:47Z"
  generation: 1
  name: java-spring-boot2-validate-stack-task
  namespace: kabanero
  ownerReferences:
  - apiVersion: kabanero.io/v1alpha2
    controller: false
    kind: Stack
    name: java-spring-boot2
    uid: 4ee1ace2-2196-4c47-8fe7-b004cbdd20d5
  resourceVersion: "100135"
  selfLink: /apis/tekton.dev/v1alpha1/namespaces/kabanero/tasks/java-spring-boot2-validate-stack-task
  uid: 4aa950fd-3ea2-42e2-9ff7-a16553e727dc
spec:
  inputs:
    resources:
    - name: git-source
      type: git
  steps:
  - args:
    - -c
    - "# env var gitsource\nGITSOURCE=$gitsource\nAPPSODY_CONFIG=\".appsody-config.yaml\"\nIMAGE_REGISTRY_HOST=$DEFAULT_STACK_IMAGE_REGISTRY_URL\nIMAGE_REGISTRY_USERNAME=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME\nIMAGE_REGISTRY_PASSWORD=$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD\n\ncd
      /workspace/$GITSOURCE\nif [ ! -f \"$APPSODY_CONFIG\" ]; then\n   echo $APPSODY_CONFIG\"
      is not found in the root of the source directory. Unable to validate if the
      stack is active.\"\n   exit 1\nfi\n\n# Find the value for \"stack:\" from the
      appsody config file and assign it to the variable 'stack'\ndeclare $( awk '{if
      ($1 ~ \"stack:\"){printf \"STACK=\"$2}}'  $APPSODY_CONFIG )\nif [ -z \"$STACK\"
      ]; then\n   echo \"$APPSODY_CONFIG does not contain a stack: definition. Unable
      to validate if the stack is active.\"\n   exit 1\nfi\n\n# Parse the image value
      for the repo, project, stackname and version\n# It can be in one of two formats
      based on appsody CLI used.\n# example 1: appsody/java-microprofile:0.2\n# example
      2: image-registry.openshift-image-registry.svc:5000/kabanero/java-microprofile:0.2\n\n#
      For version get everything after last `:`\nVERSION=\"${STACK##*:}\"\necho \"Git
      project config in $APPSODY_CONFIG... \"\necho \"VERSION = $VERSION\"\n\n# For
      project stack get everything before the last `:`\nPROJECT_STACK=\"${STACK%:*}\"\n\n#
      The stack name could be after the 2nd or 3rd `/` based on appsody version. Check
      after 3rd first\nSTACK_NAME=\"$(echo $PROJECT_STACK | cut -d'/' -f3 )\"\n\nif
      [ -z \"$STACK_NAME\" ]; then\n    PROJECT=\"$(echo $PROJECT_STACK | cut -d'/'
      -f1)\"\n    STACK_NAME=\"$( echo $PROJECT_STACK | cut -d'/' -f2 )\"\nelse\n
      \   STACK_REGISTRY=\"$(echo $PROJECT_STACK | cut -d'/' -f1)\"\n    PROJECT=\"$(
      echo $PROJECT_STACK | cut -d'/' -f2 )\"\nfi\n\necho \"STACK_IMAGE_REGISTRY =
      $STACK_REGISTRY\"\necho \"PROJECT = $PROJECT\"\necho \"STACK_NAME = $STACK_NAME\"\n\n#
      If the host wasn't specified, default to docker.io; if only specified in appsody-cfg.yaml
      use that\n# If it's in the config map use that and should match with what's
      in appsody-cfg.yaml\nif [ -z \"$IMAGE_REGISTRY_HOST\" ]; then\n    if [ -z \"$STACK_REGISTRY\"
      ]; then\n      IMAGE_REGISTRY_HOST=\"docker.io\"\n    else\n      IMAGE_REGISTRY_HOST=$STACK_REGISTRY\n
      \   fi\nelse  \n    if [ ! -z \"$STACK_REGISTRY\" ] && [ \"$STACK_REGISTRY\"
      != \"$IMAGE_REGISTRY_HOST\" ]; then\n        echo \"\"\n        RECONCILED_REGISTRY=\"TRUE\"\n
      \       echo \"WARNING - $APPSODY_CONFIG specifies different repository, $STACK_REGISTRY,
      than what's configured in the config map, $IMAGE_REGISTRY_HOST, in the cluster.
      \ Config map entry takes priority.  Using $IMAGE_REGISTRY_HOST as the default
      stack registry.\"\n    fi\nfi\n\necho \"RECONCILED_STACK_IMAGE_REGISTRY_HOST
      = $IMAGE_REGISTRY_HOST\"\necho \"\"\n\n# Check to make sure the stack is active
      by name first\nkubectl get stack $STACK_NAME -o json > /dev/null 2>&1\nif [
      $? -ne 0 ]; then\n   echo \"No versions of $STACK_NAME in $APPSODY_CONFIG are
      active in the cluster.  Stack cannot be built since $STACK_NAME is not active.\"\n
      \  echo \"Stack messages = $?\"\n   exit 1\nfi\n\n# Check if the project names
      in the cfg file and active stack match\nCLUSTER_STACK_IMAGE=$( kubectl get stack
      $STACK_NAME  -o json | jq -r '.status.versions[].images[].image?' ) \necho \"In
      the cluster...\"\necho \"STACK_IMAGE = $CLUSTER_STACK_IMAGE\"\n\n# The stack
      name could be after the 2nd or 3rd `/` based on appsody version. Check after
      3rd first\nTHIRD_ENTRY=\"$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f3 )\"\n\nif
      [ -z \"$THIRD_ENTRY\" ]; then\n    CLUSTER_PROJECT=\"$(echo $CLUSTER_STACK_IMAGE
      | cut -d'/' -f1)\"\n    CLUSTER_STACK=\"$(echo $CLUSTER_STACK_IMAGE | cut -d'/'
      -f2)\"\nelse\n    CLUSTER_STACK_REGISTRY=\"$(echo $CLUSTER_STACK_IMAGE | cut
      -d'/' -f1)\"\n    CLUSTER_PROJECT=\"$( echo $CLUSTER_STACK_IMAGE | cut -d'/'
      -f2 )\"\n    CLUSTER_STACK=\"$(echo $CLUSTER_STACK_IMAGE | cut -d'/' -f3)\"\nfi\n\necho
      \"STACK_IMAGE_REGISTRY = $CLUSTER_STACK_REGISTRY\"\necho \"PROJECT = $CLUSTER_PROJECT\"\necho
      \"STACK_NAME = $CLUSTER_STACK\"\n\nif [ \"$CLUSTER_PROJECT\" != \"$PROJECT\"
      ]; then\n    echo \"Project name, $CLUSTER_PROJECT, of active stack in cluster
      and project name in the stack in $APPSODY_CONFIG, $PROJECT, do not match.\"\n
      \   echo \"Validation failed. Stack cannot be built.\"\n    exit 1\nfi\n\n#
      TODO add registry validation logic here.  Implictly handled by digest check.\n#
      But can give a better error message with just a name check\n\n# Get the 3 digit
      stack values\n# Assumed the version(s) are in the metadata\nCLUSTER_STACK_VERSIONS=$(
      kubectl get stack $STACK_NAME  -o json | jq -r '.status.versions[].version?'
      )    \necho \"VERSIONS = $CLUSTER_STACK_VERSIONS\"\necho \"\"\n\n# Get the target
      sha256 digest from the image registry. Use the proper credentials depending
      on what was passed to us\nif [ -z \"$IMAGE_REGISTRY_PASSWORD\" ] || [ -z \"$IMAGE_REGISTRY_USERNAME\"
      ]; then\n   TARGET_DIGEST=$( skopeo inspect --tls-verify=false docker://\"$IMAGE_REGISTRY_HOST\"/\"$PROJECT\"/\"$STACK_NAME\":\"$VERSION\"
      | jq '.Digest' )\nelse\n   TARGET_DIGEST=$( skopeo inspect --tls-verify=false
      --creds=\"$IMAGE_REGISTRY_USERNAME\":\"$IMAGE_REGISTRY_PASSWORD\" docker://\"$IMAGE_REGISTRY_HOST\"/\"$PROJECT\"/\"$STACK_NAME\":\"$VERSION\"
      | jq '.Digest' )\nfi    \n\nif [ -z \"$TARGET_DIGEST\" ]; then\n   echo \"$APPSODY_CONFIG
      specifies a stack version of $VERSION , but the image registry does not contain
      a version tagged with $VERSION, and cannot be built.\"\n   exit 1\nfi\n\nfor
      STACK_VERSION in ${CLUSTER_STACK_VERSIONS}\n   do\n      if [ -z \"$IMAGE_REGISTRY_PASSWORD\"
      ] || [ -z \"$IMAGE_REGISTRY_USERNAME\" ]; then\n         CURRENT_DIGEST=$( skopeo
      inspect --tls-verify=false docker://\"$IMAGE_REGISTRY_HOST\"/\"$PROJECT\"/\"$STACK_NAME\":\"$STACK_VERSION\"
      | jq '.Digest' )\n      else\n         CURRENT_DIGEST=$( skopeo inspect --tls-verify=false
      --creds=\"$IMAGE_REGISTRY_USERNAME\":\"$IMAGE_REGISTRY_PASSWORD\" docker://\"$IMAGE_REGISTRY_HOST\"/\"$PROJECT\"/\"$STACK_NAME\":\"$STACK_VERSION\"
      | jq '.Digest' )\n      fi    \n\n      if [ \"$TARGET_DIGEST\" =  \"$CURRENT_DIGEST\"
      ]; then\n        if [ \"$RECONCILED_REGISTRY\" == \"TRUE\" ]; then\n          echo
      \"\"\n          echo \"WARNING - A config map has been created on the cluster
      with the stack image registry information. The registry of the application stack,
      $STACK, specified in $APPSODY_CONFIG will be overridden by the registry configured
      in the config map, stack-image-registry-map.\"\n          echo \"Validation
      is performed using the image located in the $IMAGE_REGISTRY_HOST registry that
      was configured in the config map.\"\n        fi\n        echo \"\"  \n        echo
      \"The application stack, \"$PROJECT/$STACK_NAME:$VERSION\", in $APPSODY_CONFIG
      is active on this cluster and can be built.\"\n        exit 0\n      else\n
      \        echo \"Cluster stack version: $STACK_VERSION, Cluster stack digest:
      $CURRENT_DIGEST\"\n         echo \"Project stack version: $VERSION, Project
      stack digest: $TARGET_DIGEST\"\n      fi\n   done\n   if [ \"$RECONCILED_REGISTRY\"
      == \"TRUE\" ]; then\n     echo \"\"           \n     echo \"WARNING - A config
      map has been created on the cluster with the stack image registry information.
      The registry of the application stack, $STACK, specified in $APPSODY_CONFIG
      will be overridden by the registry configured in the config map, stack-image-registry-map.\"
      \ \n     echo \"Validation is performed using the image located in the $IMAGE_REGISTRY_HOST
      registry that was configured in the config map.\"\n   fi  \n   echo \"\" \n
      \  echo \"WARNING - A compatible version of the application stack, \"$PROJECT/$STACK_NAME:$VERSION\",
      is not active on this cluster. Please review the active versions of the stack
      on the cluster (oc get stack $STACK_NAME -o json) and the stack specification
      in the $APPSODY_CONFIG file of the git project.\"\n   exit 0\n"
    command:
    - /bin/bash
    env:
    - name: gitsource
      value: git-source
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
          key: default-stack-image-registry-url
          name: stack-image-registry-map
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: default-stack-image-registry-secret
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: default-stack-image-registry-secret
          optional: true
    image: kabanero/validate-stack:0.6.0
    name: validate-stack-is-active
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /config
      name: config-volume
    - mountPath: /etc/secret-volume
      name: secret-volume
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - configMap:
      name: stack-image-registry-map
      optional: true
    name: config-volume
  - name: secret-volume
    secret:
      optional: true
      secretName: default-stack-image-registry-secret
