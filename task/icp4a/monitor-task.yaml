apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: monitor-task
  namespace: tekton-pipelines
spec:
  inputs:
    params:
      - description: The statuses url
        name: statusesurl
        type: string
      - default: Success
        description: The text to use in the situation where a PipelineRun has succeeded.
        name: commentsuccess
        type: string
      - default: Failed
        description: The text to use in the situation where a PipelineRun has failed.
        name: commentfailure
        type: string
      - default: Unknown
        description:
          The text to use in the situation where a PipelineRun has timed
          out.
        name: commenttimeout
        type: string
      - default: Missing
        description:
          The text to use in the situation where a PipelineRun cannot be
          found.
        name: commentmissing
        type: string
      - default: http://localhost:9097/
        description: The URL to the pipelineruns page of the dashboard
        name: dashboard-url
        type: string
      - default: github
        description: The git provider, "github" or "gitlab"
        name: provider
        type: string
      - description: The git api URL for the repository
        name: apiurl
        type: string
      - default: "false"
        description:
          Whether or not to verify SSL Certificates from the git server ("true"
          or "false")
        name: insecure-skip-tls-verify
        type: string
      - description: The secret containing the access token to access the git server
        name: secret
        type: string
    resources:
      - name: pull-request
        type: pullRequest
  outputs:
    resources:
      - name: pull-request
        type: pullRequest
  steps:
    - args:
        - -ce
        - "set -e\ncat <<EOF | python\nimport time, os, json, requests, pprint, shutil,
          distutils.util\nfrom kubernetes import client, config\ndef diff(li1, li2): \n
          \ li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n  return
          li_dif\nconfig.load_incluster_config()\napi_instance = client.CustomObjectsApi(client.ApiClient(client.Configuration()))\ngitPRcontext
          = \"Tekton\"\ngitPRurl = \"\"  \nif not \"$URL\".startswith(\"http\"):\n  pipelineRunURLPrefix
          = \"http://\" + \"$URL\"\nelse:\n  pipelineRunURLPrefix = \"$URL\"    \nverifySSL
          = not bool(distutils.util.strtobool(\"$SKIPSSLVERIFY\"))\nif \"$GITPROVIDER\"
          == \"github\":\n  statusurl = \"$STATUSES_URL\"\n  pendingData = {\n    \"state\":
          \"pending\",\n    \"description\": \"pipelines in progress\",\n    \"target_url\":
          pipelineRunURLPrefix + \"/#/pipelineruns\",\n    \"context\": \"Tekton\"\n  }\n
          \ resp = requests.post(statusurl, json.dumps(pendingData), headers = {'Content-Type':
          'application/json', 'Authorization': \"Token $GITTOKEN\"}, verify=verifySSL)\n
          \ print(resp)\nif \"$GITPROVIDER\" == \"gitlab\":\n  statusurl = \"$GITAPIURL\"
          + \"/\" + \"$STATUSES_URL\" + \"?state=pending&name=Tekton&target_url=\" + pipelineRunURLPrefix
          + \"/#/pipelineruns\"\n  resp = requests.post(statusurl, headers = {'Authorization':
          \"Bearer $GITTOKEN\"}, verify=verifySSL)\n  print(resp)\nlabelToCheck = \"tekton.dev/triggers-eventid=$EVENTID\"\nrunsPassed
          = []\nrunsFailed = []\nrunsIncomplete = []\nrunsMissing = []\nfailed = 0\ni
          = range(180)\ninitial_runs = api_instance.list_cluster_custom_object(\"tekton.dev\",
          \"v1alpha1\", \"pipelineruns\", label_selector=labelToCheck)[\"items\"]\nfor
          x in i:\n    time.sleep( 10 )\n    runsPassed = []\n    runsFailed = []\n    runsIncomplete
          = []\n    # To test this we need a webhook that will kick off two Pipelines\n
          \   # We will then delete one PipelineRun and observe it is correctly picked
          up as missing\n    # This is easiest done by reopening an existing PullRequest\n
          \   # It's important to delete the PipelineRun only after the monitor task is
          already running because \n    # the first thing it's going to do is figure out
          the PipelineRuns to watch over\n    failed = 0\n    found_runs = api_instance.list_cluster_custom_object(\"tekton.dev\",
          \"v1alpha1\", \"pipelineruns\", label_selector=labelToCheck)[\"items\"]\n    \n
          \   missingRuns = diff(initial_runs, found_runs)\n    if len(missingRuns) >
          0:\n      for missingRun in missingRuns:\n        pr = missingRun[\"metadata\"][\"name\"]\n
          \       namespace = missingRun[\"metadata\"][\"namespace\"]\n        pipeline
          = missingRun[\"spec\"][\"pipelineRef\"][\"name\"]\n        link = pipelineRunURLPrefix
          + \"/#/namespaces/\" + namespace + \"/pipelineruns/\"\n        data = \"[**$COMMENT_MISSING**](\"
          + link + \") | \" + pipeline + \" | \" + pr + \" | \" + namespace\n        if
          data not in runsMissing:\n          # Don't add duplicates. Fear not, once this
          run is found it'll be removed\n          runsMissing.append(data)\n    if len(found_runs)
          > 0:\n      for entry in found_runs:\n        pr = entry[\"metadata\"][\"name\"]\n
          \       namespace = entry[\"metadata\"][\"namespace\"]\n        pipeline = entry[\"spec\"][\"pipelineRef\"][\"name\"]\n
          \       link = pipelineRunURLPrefix + \"/#/namespaces/\" + namespace + \"/pipelineruns/\"
          + pr\n        missingLink = pipelineRunURLPrefix + \"/#/namespaces/\" + namespace
          + \"/pipelineruns/\"\n        missingDataEntry = \"[**$COMMENT_MISSING**](\"
          + missingLink + \") | \" + pipeline + \" | \" + pr + \" | \" + namespace\n        if
          missingDataEntry in runsMissing:\n          runsMissing.remove(data)\n        print(\"Checking
          pipelinerun \" + pr + \" in namespace \" + namespace)\n        if entry[\"status\"][\"conditions\"][0][\"status\"]
          == u'True' and entry[\"status\"][\"conditions\"][0][\"type\"] == u'Succeeded':\n
          \         print(\"Success - pipelinerun \" + pr + \" in namespace \" + namespace)\n
          \         runsPassed.append(\"[**$COMMENT_SUCCESS**](\" + link + \") | \" +
          pipeline + \" | \" +  pr + \" | \" + namespace)\n          continue\n        if
          entry[\"status\"][\"conditions\"][0][\"status\"] == u'False' and entry[\"status\"][\"conditions\"][0][\"type\"]
          == u'Succeeded':\n          failed =+ 1\n          print(\"Failed - pipelinerun
          \" + pr + \" in namespace \" + namespace)\n          runsFailed.append(\"[**$COMMENT_FAILURE**](\"
          + link + \") | \" + pipeline + \" | \" + pr + \" | \" + namespace)\n          continue\n
          \       link = pipelineRunURLPrefix + \"/#/namespaces/\" + namespace + \"/pipelineruns/\"
          + pr\n        runsIncomplete.append(\"[**$COMMENT_TIMEOUT**](\" + link + \")
          | \" + pipeline + \" | \" + pr + \" | \" + namespace)\n      if len(runsIncomplete)
          == 0:\n        break\n    else:\n      break\ngitPRdescription = \"All pipelines
          succeeded!\"\ngitPRcode = \"success\"\nif failed > 0:\n  gitPRdescription =
          str(failed) + \" pipeline(s) failed!\"\n  gitPRcode = \"failure\"\nif len(runsMissing)
          > 0:\n  gitPRdescription = \"Pipeline(s) missing!\"\n  gitPRcode = \"failure\"\nif
          len(runsIncomplete) > 0:\n  print(\"Some PipelineRuns had not completed when
          the monitor reached its timeout\")\n  gitPRdescription = \"timed out monitoring
          pipeline runs\"\n  gitPRcode = \"error\"\n\nresults = runsPassed + runsFailed
          + runsIncomplete + runsMissing\n\nif (results == []):\n  gitPRdescription =
          \"No PipelineRuns were ever found for my PullRequest!\"\n  gitPRcode = \"error\"\n
          \ data = \"**$COMMENT_MISSING** | N/A | No PipelineRuns were ever detected,
          failing the build | N/A\"\n  runsMissing.append(data)\n  results = runsMissing\n\ncomment
          = (\"## Tekton Status Report \\n\\n\"\n           \"Status | Pipeline | PipelineRun
          | Namespace\\n\"\n           \":----- | :------- | :--------------- | :--------\\n\"\n
          \          ) + \"\\n\".join(results)\n\nshutil.copyfile(\"/workspace/pull-request/pr.json\",\"/workspace/output/pull-request/pr.json\")\n#
          Preserve existing comments\nshutil.copytree(\"/workspace/pull-request/comments\",\"/workspace/output/pull-request/comments\")\nhandle
          = open(\"/workspace/output/pull-request/comments/newcomment.json\", 'w')\nhandle.write(comment)\nhandle.close()\nif
          not \"$URL\".startswith(\"http\"):\n  detailsURL = \"http://\" + \"$URL\" +
          \"/#/pipelineruns\"\nelse:\n  detailsURL = \"$URL\" + \"/#/pipelineruns\"\nprint(\"Set
          details url to \" + detailsURL)\nstatus = json.dumps(dict(Label=gitPRcontext,state=gitPRcode,Desc=gitPRdescription,Target=detailsURL))\nprint(\"Setting
          status to \" + status)\nif not os.path.exists(\"/workspace/output/pull-request/status\"):\n
          \ os.makedirs(\"/workspace/output/pull-request/status\")\nhandle = open(\"/workspace/output/pull-request/status/Tekton.json\",
          'w')\nhandle.write(status)\nhandle.close()\nif not os.path.exists(\"/workspace/output/pull-request/labels\"):\n
          \ shutil.copytree(\"/workspace/pull-request/labels\",\"/workspace/output/pull-request/labels\")\nshutil.copyfile(\"/workspace/pull-request/base.json\",\"/workspace/output/pull-request/base.json\")
          \nshutil.copyfile(\"/workspace/pull-request/head.json\",\"/workspace/output/pull-request/head.json\")\nEOF\n"
      command:
        - /bin/bash
      env:
        - name: EVENTID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/triggers-eventid']
        - name: COMMENT_SUCCESS
          value: $(inputs.params.commentsuccess)
        - name: COMMENT_FAILURE
          value: $(inputs.params.commentfailure)
        - name: COMMENT_TIMEOUT
          value: $(inputs.params.commenttimeout)
        - name: COMMENT_MISSING
          value: $(inputs.params.commentmissing)
        - name: URL
          value: $(inputs.params.dashboard-url)
        - name: STATUSES_URL
          value: $(inputs.params.statusesurl)
        - name: GITPROVIDER
          value: $(inputs.params.provider)
        - name: GITAPIURL
          value: $(inputs.params.apiurl)
        - name: SKIPSSLVERIFY
          value: $(inputs.params.insecure-skip-tls-verify)
        - name: GITTOKEN
          valueFrom:
            secretKeyRef:
              key: accessToken
              name: $(inputs.params.secret)
      image: maiwj/kubernetes-python-client@sha256:74a868a0dff5c8ada64472db3efd09d205d4f877d14d2d3226511adbb25cfea3
      name: check
      resources: {}
