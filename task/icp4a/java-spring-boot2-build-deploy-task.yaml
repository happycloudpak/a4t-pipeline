apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  annotations:
    manifestival: new
  creationTimestamp: "2020-04-01T13:41:45Z"
  generation: 1
  name: java-spring-boot2-build-deploy-task
  namespace: kabanero
  ownerReferences:
  - apiVersion: kabanero.io/v1alpha2
    controller: false
    kind: Stack
    name: java-spring-boot2
    uid: 4ee1ace2-2196-4c47-8fe7-b004cbdd20d5
  resourceVersion: "100090"
  selfLink: /apis/tekton.dev/v1alpha1/namespaces/kabanero/tasks/java-spring-boot2-build-deploy-task
  uid: 501ed402-cf28-402f-92ef-79166802b2eb
spec:
  inputs:
    params:
    - default: app-deploy.yaml
      name: app-deploy-file-name
      type: string
    - default: docker.io
      name: stack-image-registry-url
      type: string
    resources:
    - name: git-source
      type: git
  outputs:
    resources:
    - name: docker-image
      type: image
  steps:
  - args:
    - -c
    - "#logic to make docker image image_name as lowercase\n#example input docker-image-url=image-registry.openshift-image-registry.svc:5000/kabanero/appsodyMPversion:abcDEF\n#
      Then output should be = image-registry.openshift-image-registry.svc:5000/kabanero/appsodympversion:abcDEF\n\necho
      \"OUTPUTS_RESOURCE_DOCKER_IMAGE_URL=\\$( echo \\$(outputs.resources.docker-image.url)
      ) \" > imageurl_imagename_lowercase.sh\n\n# we cut the string with last occurance
      of '/' to get image name and tag as secondHalf of URL\necho \"firstHalfURL=\\$(echo
      \\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL | rev | cut -d\\\"/\\\" -f2- | rev)\"  >>
      imageurl_imagename_lowercase.sh\necho \"secondHalfURL=\\$(echo \\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL
      | rev | cut -d\\\"/\\\" -f1 | rev)\" >>  imageurl_imagename_lowercase.sh\n\n#Conditional
      check if ':' is present in 'secondHalfURL'. \n#for ex - secondHalfURL=appsodympversion:abcDEF\necho
      \"if [[ \\$secondHalfURL == *\\\":\\\"* ]]; then\" >> imageurl_imagename_lowercase.sh\necho
      \"  imagename=\\$(cut -d ':' -f 1 <<< \\\"\\$secondHalfURL\\\" )\" >> imageurl_imagename_lowercase.sh\necho
      \"  imagename_lowercase=\\$(echo \\$imagename |  tr '[:upper:]' '[:lower:]')\"
      >> imageurl_imagename_lowercase.sh\necho \"  tagname=\\$(cut -d ':' -f 2- <<<
      \\\"\\$secondHalfURL\\\" )\" >> imageurl_imagename_lowercase.sh\necho \"  OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\\$firstHalfURL/\\$imagename_lowercase:\\$tagname\"
      >> imageurl_imagename_lowercase.sh\n#conditional check for ex - secondHalfURL=appsodympversion:abcDEF\necho
      \"else\" >> imageurl_imagename_lowercase.sh\necho \"  imagename=\\$secondHalfURL\"
      >> imageurl_imagename_lowercase.sh\necho \"  imagename_lowercase=\\$(echo \\$imagename
      |  tr '[:upper:]' '[:lower:]')\" >> imageurl_imagename_lowercase.sh\necho \"
      \ OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=\\$firstHalfURL/\\$imagename_lowercase\"
      >> imageurl_imagename_lowercase.sh\necho \"fi\" >> imageurl_imagename_lowercase.sh
      \necho \"echo \\\"\\$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\\\" \" >>  imageurl_imagename_lowercase.sh\n
      \nchmod 755 imageurl_imagename_lowercase.sh\n"
    command:
    - /bin/bash
    env:
    - name: gitsource
      value: git-source
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    name: imagename-lowercase
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - args:
    - -c
    - "echo \"Configmap value for DEFAULT_STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL\"\n\nif
      [ -z \"$DEFAULT_STACK_IMAGE_REGISTRY_URL\" ]\nthen\n    echo \"DEFAULT_STACK_IMAGE_REGISTRY_URL
      not configured in a config map.  Look for the stack registry info in the .appsody-cfg
      file.\"\n    APPSODY_CONFIG=\".appsody-config.yaml\"\n    \n    # Default the
      stack registry to docker.io\n    STACK_IMAGE_REGISTRY_URL=\"docker.io\"\n\n
      \   cd /workspace/$gitsource\n    \n    if [ ! -f \"$APPSODY_CONFIG\" ]; then\n
      \       echo \"$APPSODY_CONFIG is not found in the root of the source directory.\"\n
      \   else\n        # Find the value for \"stack:\" from the appsody config file
      and assign it to the variable 'stack'\n        declare $( awk '{if ($1 ~ \"stack:\"){printf
      \"STACK=\"$2}}'  $APPSODY_CONFIG )\n        if [ -z \"$STACK\" ]; then\n          echo
      \"$APPSODY_CONFIG does not contain a stack definition.\"\n        fi\n    fi\n\n
      \   # The stack registry may or may not be in the appsody-cfg.yaml file\n    #
      If it's there the format should be like registry/project/name:version\n    #
      It could also just be project/name:version.\n    # Try to determine if the registry
      is there and if it is, parse it out\n    NUM_SLASHES=$(awk -F\"/\" '{print NF-1}'
      <<< \"${STACK}\")\n    if [ \"$NUM_SLASHES\" = 1 ]; then\n        echo \"No
      stack registry specified in $APPSODY_CONFIG. Using docker.io as the stack registry.\"\n
      \   elif [ \"$NUM_SLASHES\" = 2 ]; then\n        STACK_IMAGE_REGISTRY_URL=\"$(echo
      $STACK | cut -d'/' -f1)\"\n        echo \"Stack registry specified in $APPSODY_CONFIG
      as $STACK_IMAGE_REGISTRY_URL.  Using this as the stack registry.\"\n    else\n
      \       echo \"Unexpeted format for stack in APPSODY_CONFIG. Using docker.io
      as the stack registry\"\n    fi\nelse\n    echo \"Using stack image registry
      url setup by user in configmap as $DEFAULT_STACK_IMAGE_REGISTRY_URL\"\n    STACK_IMAGE_REGISTRY_URL=$DEFAULT_STACK_IMAGE_REGISTRY_URL\nfi\n\necho
      \"Looking for stack registry at $STACK_IMAGE_REGISTRY_URL.\"\n\nif [[ ( -z \"$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME\"
      ) || ( -z \"$DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD\" ) ]]\nthen\n    echo
      \"DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME or DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      is empty.  Assumption is authentication to the registry is not required.\"\n
      \   if [[ \"$STACK_IMAGE_REGISTRY_URL\" == *\"$internal_stack_registry_string\"*
      \ ]];then\n       echo \"Creating the certificate for STACK_IMAGE_REGISTRY_URL=$STACK_IMAGE_REGISTRY_URL\"\n
      \      #Creating a cert for the internal image registry url\n       echo \"The
      STACK_IMAGE_REGISTRY_URL is internal registry =$STACK_IMAGE_REGISTRY_URL\"\n
      \      echo \"HOST=$STACK_IMAGE_REGISTRY_URL\" > cert-creation.sh\n       echo
      \"sudo mkdir -p /etc/docker/certs.d/\\${HOST}\" >> cert-creation.sh\n       echo
      \"openssl s_client -connect \\${HOST} -servername \\${HOST} 2>/dev/null </dev/null
      | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/docker/certs.d/\\${HOST}/ca.crt\"
      >> cert-creation.sh\n\n       chmod 755 cert-creation.sh\n       ./cert-creation.sh\n
      \   fi\nelse\n    echo \"Secrets are provided to login to stack registry\"\n
      \   echo \"Creating the certificate for STACK_IMAGE_REGISTRY_URL=$STACK_IMAGE_REGISTRY_URL\"\n
      \   #Creating a cert for authentication of buildah login of the DEFAULT_STACK_IMAGE_REGISTRY_URL
      registry url\n    echo \"HOST=$STACK_IMAGE_REGISTRY_URL\" > cert-creation.sh\n
      \   echo \"sudo mkdir -p /etc/docker/certs.d/\\${HOST}\" >> cert-creation.sh\n
      \   echo \"openssl s_client -connect \\${HOST} -servername \\${HOST} 2>/dev/null
      </dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee
      -a /etc/docker/certs.d/\\${HOST}/ca.crt\" >> cert-creation.sh\n    echo \"buildah
      login -u $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME -p $DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      \\${HOST}\" >> cert-creation.sh\n    \n    echo \"Creating certificates and
      logging into the registry.\"\n    chmod 755 cert-creation.sh\n    ./cert-creation.sh\nfi\n\ncd
      /workspace/$gitsource\n\nOUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo
      $( /workspace/imageurl_imagename_lowercase.sh ) )\necho \"OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\"\n\nappsody
      build -t \"$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE\" --buildah --buildah-options
      \"--format=docker\" --stack-registry \"$STACK_IMAGE_REGISTRY_URL\"\n"
    command:
    - /bin/bash
    env:
    - name: gitsource
      value: git-source
    - name: internal_stack_registry_string
      value: image-registry.openshift-image-registry.svc:5000
    - name: DEFAULT_STACK_IMAGE_REGISTRY_URL
      valueFrom:
        configMapKeyRef:
          key: default-stack-image-registry-url
          name: stack-image-registry-map
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: default-stack-image-registry-secret
          optional: true
    - name: DEFAULT_STACK_IMAGE_REGISTRY_SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: default-stack-image-registry-secret
          optional: true
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    name: build
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    - mountPath: /config
      name: config-volume
    - mountPath: /etc/secret-volume
      name: secret-volume
  - args:
    - -c
    - |2

      OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$( echo $( /workspace/imageurl_imagename_lowercase.sh ) )
      echo "OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE=$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"

      buildah push --tls-verify=false "$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE" "docker://$OUTPUTS_RESOURCE_DOCKER_IMAGE_URL_LOWERCASE"
    command:
    - /bin/bash
    env:
    - name: gitsource
      value: git-source
    image: appsody/appsody-buildah:0.5.8-buildah1.9.0
    name: push
    resources: {}
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
  - args:
    - -c
    - find /workspace/$gitsource -name ${YAMLFILE} -type f|xargs kubectl apply -f
    command:
    - /bin/sh
    env:
    - name: gitsource
      value: git-source
    - name: YAMLFILE
      value: $(inputs.params.app-deploy-file-name)
    image: kabanero/kabanero-utils:0.3.0
    name: deploy-image
    resources: {}
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - configMap:
      name: stack-image-registry-map
      optional: true
    name: config-volume
  - name: secret-volume
    secret:
      optional: true
      secretName: default-stack-image-registry-secret
